<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>vueSoundCode-_init</title>
    <url>/2020/07/06/vueSoundCode-init/</url>
    <content><![CDATA[<h1 id="vue源码解读系列-init函数"><a href="#vue源码解读系列-init函数" class="headerlink" title="vue源码解读系列-_init函数"></a>vue源码解读系列-_init函数</h1><p>  vue原型对象上的_init函数是vue的核心函数之一，它承担着创建一个新的vue实例的作用。<br>  那么当vue执行_init函数时主要执行了那些操作？下面尝试从其源码中找到答案。</p>
<a id="more"></a>

<h2 id="initMixin函数"><a href="#initMixin函数" class="headerlink" title="initMixin函数"></a>initMixin函数</h2><p>  这个函数主要做了一件事，就是给vue原型对象定义了一个_init函数，而_init函数只接收一个选项参数options。_init函数主要做了以下事情:<br>  1.标记开始tag、<br>  2.判断当前实例是否是组件，如果是则初始化内部组件，若不是，则把构造器选项对象和当前实例选项对象合并、<br>  3.<strong>依序</strong>执行一系列初始化操作:初始化生命周期、事件、render函数、回调 beforeCreate钩子、injections、state、provide、回调 created钩子<br>  4.若存在el模板，就挂载模板</p>
<p>  initMixin函数源码如下:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">initMixin</span> <span class="params">(Vue)</span> </span>&#123;</span><br><span class="line">  Vue.prototype._init = <span class="function"><span class="keyword">function</span> <span class="params">(options)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = this;</span><br><span class="line">    <span class="comment">// a uid</span></span><br><span class="line">    vm._uid = uid$<span class="number">1</span>++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> startTag, endTag;</span><br><span class="line">    <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"development"</span> !== <span class="string">'production'</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">      startTag = <span class="string">"vue-perf-start:"</span> + (vm._uid);</span><br><span class="line">      endTag = <span class="string">"vue-perf-end:"</span> + (vm._uid);</span><br><span class="line">      mark(startTag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a flag to avoid this being observed</span></span><br><span class="line">    vm._isVue = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// merge options</span></span><br><span class="line">    <span class="comment">// 判断是否是组件</span></span><br><span class="line">    <span class="keyword">if</span> (options &amp;&amp; options._isComponent) &#123;</span><br><span class="line">      <span class="comment">// optimize internal component instantiation</span></span><br><span class="line">      <span class="comment">// since dynamic options merging is pretty slow, and none of the</span></span><br><span class="line">      <span class="comment">// internal component options needs special treatment.</span></span><br><span class="line">      <span class="comment">/* 优化内部组件实例，因为动态组件非常慢，内部组件实例不需要特殊处理。*/</span></span><br><span class="line"></span><br><span class="line">      &lt;!--初始化内部组件 把组件中的诸如<span class="keyword">parent</span>，props，_parentListeners等赋值给当前的实例 --&gt;</span><br><span class="line">      initInternalComponent(vm, options);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      vm.$options = mergeOptions(</span><br><span class="line">        &lt;!--   返回一个构造器options对象，如果有父构造器且发生了改变则更新继承。其中对后期修改/附加的选项，</span><br><span class="line">        extend选项都有更新。 --&gt;</span><br><span class="line">        resolveConstructorOptions(vm.constructor),</span><br><span class="line">        options || &#123;&#125;,</span><br><span class="line">        vm</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">    &#123;</span><br><span class="line">      initProxy(vm);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// expose real self</span></span><br><span class="line">    vm._self = vm;</span><br><span class="line">    <span class="comment">// 初始化生命周期</span></span><br><span class="line">    initLifecycle(vm);</span><br><span class="line">    <span class="comment">// 初始化事件</span></span><br><span class="line">    initEvents(vm);</span><br><span class="line">    <span class="comment">// 初始化render函数</span></span><br><span class="line">    initRender(vm);</span><br><span class="line">    <span class="comment">// 回调 beforeCreate钩子</span></span><br><span class="line">    callHook(vm, <span class="string">'beforeCreate'</span>);</span><br><span class="line">    <span class="comment">// 在初始化data或者props前解析injections</span></span><br><span class="line">    initInjections(vm); <span class="comment">// resolve injections before data/props</span></span><br><span class="line">    <span class="comment">// 初始化state</span></span><br><span class="line">    initState(vm);</span><br><span class="line">    <span class="comment">// 在data/props之后解析provide</span></span><br><span class="line">    initProvide(vm); <span class="comment">// resolve provide after data/props</span></span><br><span class="line">    <span class="comment">// 回调 created钩子</span></span><br><span class="line">    callHook(vm, <span class="string">'created'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"development"</span> !== <span class="string">'production'</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">      vm._name = formatComponentName(vm, <span class="keyword">false</span>);</span><br><span class="line">      mark(endTag);</span><br><span class="line">      measure((<span class="string">"vue "</span> + (vm._name) + <span class="string">" init"</span>), startTag, endTag);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 如果存在el模板，就挂载模板 */</span></span><br><span class="line">    <span class="keyword">if</span> (vm.$options.el) &#123;</span><br><span class="line">      vm.$mount(vm.$options.el);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>  <strong><em>重要功能函数</em></strong></p>
<h3 id="initLifecycle-vm"><a href="#initLifecycle-vm" class="headerlink" title="initLifecycle(vm)"></a>initLifecycle(vm)</h3><p>  初始化生命周期，向上寻找第一个满足abstract为真且存在其parent的父实例，同时声明一些变量。代码如下:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initLifecycle</span> <span class="params">(vm)</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> options = vm.$options;</span><br><span class="line"></span><br><span class="line"><span class="comment">// locate first non-abstract parent</span></span><br><span class="line"><span class="comment">// 定位vm最近一个parent</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">parent</span> = options.<span class="keyword">parent</span>;</span><br><span class="line"><span class="comment">// parent存在且VM自身也是非抽象的，一直向上追溯到parent的abstract为真且存在其parent，这时把它的parent</span></span><br><span class="line"><span class="comment">// 当做vm的parent。并在其$children中存入vm</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">parent</span> &amp;&amp; !options.<span class="keyword">abstract</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">parent</span>.$options.<span class="keyword">abstract</span> &amp;&amp; <span class="keyword">parent</span>.$parent) &#123;</span><br><span class="line">    <span class="keyword">parent</span> = <span class="keyword">parent</span>.$parent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">parent</span>.$children.push(vm);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 声明一些必须变量 */</span></span><br><span class="line">vm.$parent = <span class="keyword">parent</span>;</span><br><span class="line">vm.$root = <span class="keyword">parent</span> ? <span class="keyword">parent</span>.$root : vm;</span><br><span class="line"></span><br><span class="line">vm.$children = [];</span><br><span class="line">vm.$refs = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">vm._watcher = <span class="keyword">null</span>;</span><br><span class="line">vm._inactive = <span class="keyword">null</span>;</span><br><span class="line">vm._directInactive = <span class="keyword">false</span>;</span><br><span class="line">vm._isMounted = <span class="keyword">false</span>;</span><br><span class="line">vm._isDestroyed = <span class="keyword">false</span>;</span><br><span class="line">vm._isBeingDestroyed = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="initEvents-vm"><a href="#initEvents-vm" class="headerlink" title="initEvents(vm)"></a>initEvents(vm)</h3><p>  初始化事件，源码如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initEvents</span> (<span class="params">vm</span>) </span>&#123;</span><br><span class="line">vm._events = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">vm._hasHookEvent = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// init parent attached events</span></span><br><span class="line"><span class="comment">// 初始化父实例附加的事件</span></span><br><span class="line"><span class="keyword">var</span> listeners = vm.$options._parentListeners;</span><br><span class="line"><span class="keyword">if</span> (listeners) &#123;</span><br><span class="line">    updateComponentListeners(vm, listeners);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="initRender-vm"><a href="#initRender-vm" class="headerlink" title="initRender(vm)"></a>initRender(vm)</h3><p>  初始化render函数,初始化一系列参数如：slots、渲染上下文、$attrs &amp; $listeners响应式操作······源码如下:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initRender</span> <span class="params">(vm)</span> </span>&#123;</span><br><span class="line">  vm._vnode = <span class="keyword">null</span>; <span class="comment">// the root of the child tree(子实例树的根)</span></span><br><span class="line">  <span class="keyword">var</span> options = vm.$options;</span><br><span class="line">  <span class="keyword">var</span> parentVnode = vm.$vnode = options._parentVnode; <span class="comment">// the placeholder node in parent tree</span></span><br><span class="line">  <span class="keyword">var</span> renderContext = parentVnode &amp;&amp; parentVnode.context;</span><br><span class="line">  vm.$slots = resolveSlots(options._renderChildren, renderContext);</span><br><span class="line">  vm.$scopedSlots = emptyObject;</span><br><span class="line">  <span class="comment">// bind the createElement fn to this instance</span></span><br><span class="line">  <span class="comment">// so that we get proper render context inside it.</span></span><br><span class="line">  <span class="comment">// args order: tag, data, children, normalizationType, alwaysNormalize</span></span><br><span class="line">  <span class="comment">// internal version is used by render functions compiled from templates</span></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">    通过绑定createElement函数到当前实例上来从中获取本身的渲染上下文。</span></span><br><span class="line"><span class="comment">    参数顺序：tag, data, children,内部版本用来模板编译使用</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  vm._c = <span class="function"><span class="keyword">function</span> <span class="params">(a, b, c, d)</span> </span>&#123; <span class="keyword">return</span> createElement(vm, a, b, c, d, <span class="keyword">false</span>); &#125;;</span><br><span class="line">  <span class="comment">// normalization is always applied for the public version, used in</span></span><br><span class="line">  <span class="comment">// user-written render functions.</span></span><br><span class="line">  vm.$createElement = <span class="function"><span class="keyword">function</span> <span class="params">(a, b, c, d)</span> </span>&#123; <span class="keyword">return</span> createElement(vm, a, b, c, d, <span class="keyword">true</span>); &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// $attrs &amp; $listeners are exposed for easier HOC creation.</span></span><br><span class="line">  <span class="comment">// they need to be reactive so that HOCs using them are always updated</span></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">    $attrs &amp; $listeners为了更早的创建HOC而被揭露，而他们必须保持响应，因为他们一直在更新</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">var</span> parentData = parentVnode &amp;&amp; parentVnode.data;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">  <span class="comment">//对$attrs，$listeners进行响应式操作，定义。</span></span><br><span class="line">  &#123;</span><br><span class="line">    defineReactive(vm, <span class="string">'$attrs'</span>, parentData &amp;&amp; parentData.attrs || emptyObject, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">      !isUpdatingChildComponent &amp;&amp; warn(<span class="string">"$attrs is readonly."</span>, vm);</span><br><span class="line">    &#125;, <span class="keyword">true</span>);</span><br><span class="line">    defineReactive(vm, <span class="string">'$listeners'</span>, options._parentListeners || emptyObject, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">      !isUpdatingChildComponent &amp;&amp; warn(<span class="string">"$listeners is readonly."</span>, vm);</span><br><span class="line">    &#125;, <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  其中在render函数中，对$attrs &amp; $listeners都执行了<code>defineReactive()</code>函数，这个函数很重要，它实现了vue对对象属性的数据劫持和监听，确保了响应式实现。<br>  相应实现源码如下，且对关键部分做了注释说明:</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span> </span>(</span><br><span class="line">  obj,</span><br><span class="line">  key,</span><br><span class="line">  val,</span><br><span class="line">  customSetter,</span><br><span class="line">  shallow</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">var</span> dep = <span class="keyword">new</span> <span class="type">Dep</span>();<span class="comment">//声明一个依赖收集器</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> property = Object.getOwnPropertyDescriptor(obj, key);</span><br><span class="line">  <span class="keyword">if</span> (property &amp;&amp; property.configurable === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// cater for pre-defined getter/setters</span></span><br><span class="line">  <span class="keyword">var</span> getter = property &amp;&amp; property.<span class="keyword">get</span>;</span><br><span class="line">  <span class="keyword">var</span> setter = property &amp;&amp; property.<span class="keyword">set</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> childOb = !shallow &amp;&amp; observe(val);</span><br><span class="line">  <span class="comment">// 重要代码</span></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">    对象数据劫持，vue可以做到响应式的原理。给对象属性设置get、set函数。</span></span><br><span class="line"><span class="comment">    get：当该对象属性被读取时，触发依赖收集。</span></span><br><span class="line"><span class="comment">    set: 当该对象属性被赋值时，通知相应的watcher进行更新操作</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  Object.defineProperty(obj, key, &#123;</span><br><span class="line">    enumerable: <span class="type">true</span>,</span><br><span class="line">    configurable: <span class="type">true</span>,</span><br><span class="line">    <span class="keyword">get</span>: <span class="type">function reactiveGetter </span>() &#123;</span><br><span class="line">      <span class="keyword">var</span> value = getter ? getter.call(obj) : <span class="type">val</span>;</span><br><span class="line">      <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">        dep.depend();</span><br><span class="line">        <span class="keyword">if</span> (childOb) &#123;</span><br><span class="line">          childOb.dep.depend();</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">Array</span>.isArray(value)) &#123;</span><br><span class="line">            dependArray(value);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: <span class="type">function reactiveSetter </span>(<span class="keyword">new</span><span class="type">Val</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> value = getter ? getter.call(obj) : <span class="type">val</span>;</span><br><span class="line">      <span class="comment">/* eslint-disable no-self-compare */</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">new</span><span class="type">Val</span> === value || (<span class="keyword">new</span><span class="type">Val</span> !== <span class="keyword">new</span><span class="type">Val</span> &amp;&amp; value !== value)) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/* eslint-enable no-self-compare */</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="string">"development"</span> !== <span class="string">'production'</span> &amp;&amp; customSetter) &#123;</span><br><span class="line">        customSetter();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (setter) &#123;</span><br><span class="line">        setter.call(obj, <span class="keyword">new</span><span class="type">Val</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        val = <span class="keyword">new</span><span class="type">Val</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      childOb = !shallow &amp;&amp; observe(<span class="keyword">new</span><span class="type">Val</span>);</span><br><span class="line">      dep.notify();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="callHook-vm-‘beforeCreate’"><a href="#callHook-vm-‘beforeCreate’" class="headerlink" title="callHook(vm, ‘beforeCreate’)"></a>callHook(vm, ‘beforeCreate’)</h3><p>  依次遍历VM的钩子函数中存放的回调方法，并执行。如果存在钩子事件，通过emit事件传递，源码如下:</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callHook</span> <span class="params">(vm, hook)</span> &#123;</span></span><br><span class="line">  var handlers = vm.$options[hook];</span><br><span class="line">  <span class="keyword">if</span> (handlers) &#123;</span><br><span class="line">    <span class="keyword">for</span> (var <span class="built_in">i</span> = <span class="number">0</span>, <span class="built_in">j</span> = handlers.<span class="built_in">length</span>; <span class="built_in">i</span> &lt; <span class="built_in">j</span>; <span class="built_in">i</span>++) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        handlers[<span class="built_in">i</span>].call(vm);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        handleError(e, vm, (hook + <span class="string">" hook"</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (vm._hasHookEvent) &#123;</span><br><span class="line">    vm.$emit(<span class="string">'hook:'</span> + hook);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="initInjections-vm"><a href="#initInjections-vm" class="headerlink" title="initInjections(vm)"></a>initInjections(vm)</h3><p>  初始化Injection，对其每一项进行响应式定义，源码如下:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initInjections</span> <span class="params">(vm)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = resolveInject(vm.$options.inject, vm);</span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    observerState.shouldConvert = <span class="keyword">false</span>;</span><br><span class="line">    Object.keys(result).<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span> <span class="params">(key)</span> </span>&#123;</span><br><span class="line">      <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">      &#123;</span><br><span class="line">        defineReactive(vm, key, result[key], <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">          warn(</span><br><span class="line">            <span class="string">"Avoid mutating an injected value directly since the changes will be "</span> +</span><br><span class="line">            <span class="string">"overwritten whenever the provided component re-renders. "</span> +</span><br><span class="line">            <span class="string">"injection being mutated: \""</span> + key + <span class="string">"\""</span>,</span><br><span class="line">            vm</span><br><span class="line">          );</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    observerState.shouldConvert = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="initState-vm"><a href="#initState-vm" class="headerlink" title="initState(vm)"></a>initState(vm)</h3><p>  初始化state,如果存在则按照props、methods、data、computed、watch顺序进行初始化<strong><em>(ps: 这也是为什么props、methods、data、computed不能存在同名变量的原因，因为这样会对已定义的变量存在覆盖的风险)</em></strong>源码如下:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initState</span> <span class="params">(vm)</span> </span>&#123;</span><br><span class="line">  vm._watchers = [];</span><br><span class="line">  <span class="keyword">var</span> opts = vm.$options;</span><br><span class="line">  <span class="keyword">if</span> (opts.props) &#123; initProps(vm, opts.props); &#125;</span><br><span class="line">  <span class="keyword">if</span> (opts.methods) &#123; initMethods(vm, opts.methods); &#125;</span><br><span class="line">  <span class="keyword">if</span> (opts.data) &#123;</span><br><span class="line">    initData(vm);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    observe(vm._data = &#123;&#125;, <span class="keyword">true</span> <span class="comment">/* asRootData */</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (opts.computed) &#123; initComputed(vm, opts.computed); &#125;</span><br><span class="line">  <span class="keyword">if</span> (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class="line">    initWatch(vm, opts.watch);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="initProvide-vm"><a href="#initProvide-vm" class="headerlink" title="initProvide(vm)"></a>initProvide(vm)</h3><p>  初始化Provide，如果有则进行类型判断，函数就执行非函数直接赋值。源码如下:</p>
<figure class="highlight irpf90"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span></span> initProvide (vm) &#123;</span><br><span class="line">  var <span class="keyword">provide</span> = vm.$options.<span class="keyword">provide</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">provide</span>) &#123;</span><br><span class="line">    vm._provided = typeof <span class="keyword">provide</span> === <span class="string">'function'</span></span><br><span class="line">      ? <span class="keyword">provide</span>.<span class="keyword">call</span>(vm)</span><br><span class="line">      : <span class="keyword">provide</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="callHook-vm-‘created’"><a href="#callHook-vm-‘created’" class="headerlink" title="callHook(vm, ‘created’)"></a>callHook(vm, ‘created’)</h3><p>  同上面callHook(vm, ‘beforeCreate’)。</p>
]]></content>
  </entry>
  <entry>
    <title>vueSoundCode-keepalive</title>
    <url>/2020/06/27/vueSoundCode-keepalive/</url>
    <content><![CDATA[<h1 id="vue源码解读系列-keepalive"><a href="#vue源码解读系列-keepalive" class="headerlink" title="vue源码解读系列-keepalive"></a>vue源码解读系列-keepalive</h1><h2 id="keepalive基本用法"><a href="#keepalive基本用法" class="headerlink" title="keepalive基本用法"></a>keepalive基本用法</h2><p>  <keep-alive> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 <transition> 相似，<keep-alive> 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中。</keep-alive></transition></keep-alive></p>
<p>  当组件在 <keep-alive> 内被切换，它的 <code>activated</code> 和 <code>deactivated</code> 这两个生命周期钩子函数将会被对应执行。</keep-alive></p>
<a id="more"></a>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 基本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 多个条件判断的子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comp-a</span> <span class="attr">v-if</span>=<span class="string">"a &gt; 1"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp-a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comp-b</span> <span class="attr">v-else</span>&gt;</span><span class="tag">&lt;/<span class="name">comp-b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 和 `&lt;transition&gt;` 一起使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  注意，<keep-alive> 是用在其一个直属的子组件被开关的情形。如果你在其中有 <code>v-for</code> 则不会工作。如果有上述的多个条件性的子元素，<keep-alive> 要求同时只有<strong>一个子元素</strong>被渲染。</keep-alive></keep-alive></p>
<p>  keepalive在函数式组件中不起作用，因为keepalive没有vue实例。</p>
<h2 id="keepalive源码详细解析"><a href="#keepalive源码详细解析" class="headerlink" title="keepalive源码详细解析"></a>keepalive源码详细解析</h2><h3 id="keepalive辅助函数"><a href="#keepalive辅助函数" class="headerlink" title="keepalive辅助函数"></a>keepalive辅助函数</h3><p>  matches: 判断输入的参数是否匹配,可以是数组或是字符串亦或是正则表达式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matches</span> (<span class="params">pattern: <span class="built_in">string</span> | <span class="built_in">RegExp</span> | <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;, name: <span class="built_in">string</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(pattern)) &#123;</span><br><span class="line">        <span class="keyword">return</span> pattern.indexOf(name) &gt; <span class="number">-1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> pattern === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> pattern.split(<span class="string">','</span>).indexOf(name) &gt; <span class="number">-1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isRegExp(pattern)) &#123;</span><br><span class="line">        <span class="keyword">return</span> pattern.test(name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* istanbul ignore next */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>  pruneCache: 删除具体keepalive实例的缓存，声明一个对象，解构获取keepalive实例中的cache对象，keys数组和虚拟节点。遍历cache，对每一个满足名称对应和过滤条件的cache项执行pruneCacheEntry函数。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pruneCache</span> (<span class="params">keepAliveInstance: <span class="built_in">any</span>, filter: <span class="built_in">Function</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// keepAliveInstance keepAlive实例</span></span><br><span class="line">    <span class="keyword">const</span> &#123; cache, keys, _vnode &#125; = keepAliveInstance</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> cache) &#123;</span><br><span class="line">        <span class="keyword">const</span> cachedNode: ?VNode = cache[key]</span><br><span class="line">        <span class="keyword">if</span> (cachedNode) &#123;</span><br><span class="line">        <span class="keyword">const</span> name: ?<span class="built_in">string</span> = getComponentNam(cachedNode.componentOptions)</span><br><span class="line">        <span class="keyword">if</span> (name &amp;&amp; !filter(name)) &#123;</span><br><span class="line">            pruneCacheEntry(cache, key, keys, _vnode)</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  pruneCacheEntry: 查找要删除的cache实例，判断其是否存在且不等于当前虚拟节点，满足条件就置空该cache对象中的对应项，同步删除keys数组中的key。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">function pruneCacheEntry (</span><br><span class="line"><span class="keyword">cache</span>: VNodeCache,</span><br><span class="line"><span class="keyword">key</span>: <span class="keyword">string</span>,</span><br><span class="line"><span class="keyword">keys</span>: <span class="built_in">Array</span>&lt;<span class="keyword">string</span>&gt;,</span><br><span class="line"><span class="keyword">current</span>?: VNode</span><br><span class="line">) &#123;</span><br><span class="line">    const cached = <span class="keyword">cache</span>[<span class="keyword">key</span>]</span><br><span class="line">    <span class="keyword">if</span> (cached &amp;&amp; cached !== <span class="keyword">current</span>) &#123;</span><br><span class="line">        cached.componentInstance.$destroy()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">cache</span>[<span class="keyword">key</span>] = <span class="literal">null</span></span><br><span class="line">    remove(<span class="keyword">keys</span>, <span class="keyword">key</span>) //删除该实例<span class="keyword">keys</span>数组中的对应项</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="keepailve主体部分"><a href="#keepailve主体部分" class="headerlink" title="keepailve主体部分"></a>keepailve主体部分</h3><p>  <strong><em>abstract：true</em></strong>这行代码声明了keepalive的abstract属性为true，则vue在渲染的时候不会把keepalive缓存的cache渲染到真实DOM上。</p>
<p>  <code>props</code>:<br>    接收三个props参数，分别为include，exclude，max。其中include，exclude类型可为字符串，正则和数组。max可为字符串或者num类型。</p>
<p>  <code>created()</code>:<br>    声明一个cache对象，keys数组</p>
<p>  <code>destroyed ()</code>:<br>    遍历cache，对其中每个属性执行pruneCacheEntry()。</p>
<p>  <code>watch</code>:<br>    监听include和exclude，当它俩值发生变化的时候执行pruneCache()，动态进行缓存或者删除操作。</p>
<p>  <code>render ()</code>:<br>    获取当前keepalive下的默认子组件节点，判断获取到的vnode是否是一个组件，满足就执行下列操作:<br>    1. 获取组件的名字<br>    2. 满足组件设置name，且不在include，或者在exclude中时，直接返回该vnode<br>    3. 判断当前的vnode是否已被缓存，如果已被缓存则更新该缓存实例。如果没有则存入该vnode，同时若是存入的vnode超出了max限制，则会依据LRU缓存策略把最老的队尾vnode剔除。<br>    4. 设置该vnode的keepalive属性为true。最后把该vnode返回</p>
<pre><code>ps:LRU缓存策略一般通过链表实现，每被调用就会把该元素插入到队头，当满了时候就会把队尾的元素删除。</code></pre><p>  全部代码:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* @flow */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; isRegExp, remove &#125; <span class="keyword">from</span> <span class="string">'shared/util'</span></span><br><span class="line"><span class="keyword">import</span> &#123; getFirstComponentChild &#125; <span class="keyword">from</span> <span class="string">'core/vdom/helpers/index'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ts写法，声明一个虚拟节点缓存对象</span></span><br><span class="line"><span class="keyword">type</span> VNodeCache = &#123; [key: <span class="built_in">string</span>]: ?VNode &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getComponentName</span> (<span class="params">opts: ?VNodeComponentOptions</span>): ?<span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> opts &amp;&amp; (opts.Ctor.options.name || opts.tag)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断输入的参数是否匹配数组或是字符串亦或是正则表达式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matches</span> (<span class="params">pattern: <span class="built_in">string</span> | <span class="built_in">RegExp</span> | <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;, name: <span class="built_in">string</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(pattern)) &#123;</span><br><span class="line">    <span class="keyword">return</span> pattern.indexOf(name) &gt; <span class="number">-1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> pattern === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> pattern.split(<span class="string">','</span>).indexOf(name) &gt; <span class="number">-1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isRegExp(pattern)) &#123;</span><br><span class="line">    <span class="keyword">return</span> pattern.test(name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* istanbul ignore next */</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除具体keepalive实例的缓存，</span></span><br><span class="line"><span class="comment">// 声明一个对象，获取keepalive实例中的cache数组，keys数组和虚拟节点</span></span><br><span class="line"><span class="comment">// 遍历cache，对每一个满足名称对应和过滤条件的cache项执行pruneCacheEntry函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pruneCache</span> (<span class="params">keepAliveInstance: <span class="built_in">any</span>, filter: <span class="built_in">Function</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// keepAliveInstance keepAlive实例</span></span><br><span class="line">  <span class="keyword">const</span> &#123; cache, keys, _vnode &#125; = keepAliveInstance</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> cache) &#123;</span><br><span class="line">    <span class="keyword">const</span> cachedNode: ?VNode = cache[key]</span><br><span class="line">    <span class="keyword">if</span> (cachedNode) &#123;</span><br><span class="line">      <span class="keyword">const</span> name: ?<span class="built_in">string</span> = getComponentName(cachedNode.componentOptions)</span><br><span class="line">      <span class="keyword">if</span> (name &amp;&amp; !filter(name)) &#123;</span><br><span class="line">        pruneCacheEntry(cache, key, keys, _vnode)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  取出要删除的cache对象，判断其是否存在且不等于当前虚拟节点，</span></span><br><span class="line"><span class="comment">  满足条件就置空该cache对象中的对应项，同步删除keys数组中的key</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pruneCacheEntry</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  cache: VNodeCache,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  keys: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  current?: VNode</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> cached = cache[key]</span><br><span class="line">  <span class="keyword">if</span> (cached &amp;&amp; cached !== current) &#123;</span><br><span class="line">    cached.componentInstance.$destroy()</span><br><span class="line">  &#125;</span><br><span class="line">  cache[key] = <span class="literal">null</span></span><br><span class="line">  remove(keys, key) <span class="comment">//删除该实例keys数组中的对应项</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> patternTypes: <span class="built_in">Array</span>&lt;<span class="built_in">Function</span>&gt; = [<span class="built_in">String</span>, <span class="built_in">RegExp</span>, <span class="built_in">Array</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出一个对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'keep-alive'</span>,</span><br><span class="line">  <span class="keyword">abstract</span>: <span class="literal">true</span>, <span class="comment">// 不会真正渲染到dom上</span></span><br><span class="line"></span><br><span class="line">  props: &#123;</span><br><span class="line">    include: patternTypes,</span><br><span class="line">    exclude: patternTypes,</span><br><span class="line">    max: [<span class="built_in">String</span>, <span class="built_in">Number</span>]</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">// 声明一个缓存对象和一个key数组</span></span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="keyword">this</span>.cache = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">this</span>.keys = []</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  destroyed () &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="keyword">this</span>.cache) &#123;</span><br><span class="line">      pruneCacheEntry(<span class="keyword">this</span>.cache, key, <span class="keyword">this</span>.keys)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="comment">// 这里的this指的是使用keepalive的vue实例，</span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    include (val: <span class="built_in">string</span> | <span class="built_in">RegExp</span> | <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;) &#123;</span><br><span class="line">      pruneCache(<span class="keyword">this</span>, <span class="function"><span class="params">name</span> =&gt;</span> matches(val, name))</span><br><span class="line">    &#125;,</span><br><span class="line">    exclude (val: <span class="built_in">string</span> | <span class="built_in">RegExp</span> | <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;) &#123;</span><br><span class="line">      pruneCache(<span class="keyword">this</span>, <span class="function"><span class="params">name</span> =&gt;</span> !matches(val, name))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> vnode: VNode = getFirstComponentChild(<span class="keyword">this</span>.$slots.default)</span><br><span class="line">    <span class="comment">// 判断vnode是否为一个组件</span></span><br><span class="line">    <span class="keyword">const</span> componentOptions: ?VNodeComponentOptions = vnode &amp;&amp; vnode.componentOptions</span><br><span class="line">    <span class="keyword">if</span> (componentOptions) &#123;</span><br><span class="line">      <span class="comment">// check pattern</span></span><br><span class="line">      <span class="keyword">const</span> name: ?<span class="built_in">string</span> = getComponentName(componentOptions)</span><br><span class="line">      <span class="comment">/* </span></span><br><span class="line"><span class="comment">        组件声明了name,且如果是include属性中的则应为未保存过的，</span></span><br><span class="line"><span class="comment">        若是exclude属性中的，且匹配不上，则返回节点。</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="keyword">if</span> (name &amp;&amp; (</span><br><span class="line">        (<span class="keyword">this</span>.include &amp;&amp; !matches(<span class="keyword">this</span>.include, name)) ||</span><br><span class="line">        (<span class="keyword">this</span>.exclude &amp;&amp; matches(<span class="keyword">this</span>.exclude, name))</span><br><span class="line">      )) &#123;</span><br><span class="line">        <span class="keyword">return</span> vnode</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> &#123; cache, keys &#125; = <span class="keyword">this</span></span><br><span class="line">      <span class="keyword">const</span> key: ?<span class="built_in">string</span> = vnode.key == <span class="literal">null</span></span><br><span class="line">        <span class="comment">// same constructor may get registered as different local components</span></span><br><span class="line">        <span class="comment">// so cid alone is not enough (#3269)</span></span><br><span class="line">        ? componentOptions.Ctor.cid + (componentOptions.tag ? <span class="string">`::<span class="subst">$&#123;componentOptions.tag&#125;</span>`</span> : <span class="string">''</span>)</span><br><span class="line">        : vnode.key</span><br><span class="line">      <span class="keyword">if</span> (cache[key]) &#123;</span><br><span class="line">        vnode.componentInstance = cache[key].componentInstance</span><br><span class="line">        <span class="comment">// make current key freshest</span></span><br><span class="line">        remove(keys, key)</span><br><span class="line">        keys.push(key)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cache[key] = vnode</span><br><span class="line">        keys.push(key)</span><br><span class="line">        <span class="comment">// prune oldest entry</span></span><br><span class="line">        <span class="comment">// 清理掉最老的缓存，涉及LRU缓存策略</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.max &amp;&amp; keys.length &gt; <span class="built_in">parseInt</span>(<span class="keyword">this</span>.max)) &#123;</span><br><span class="line">          pruneCacheEntry(cache, keys[<span class="number">0</span>], keys, <span class="keyword">this</span>._vnode)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      vnode.data.keepAlive = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vnode   <span class="comment">// 返回一个虚拟节点</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>vueSoundCode-nextTick</title>
    <url>/2020/06/18/vueSoundCode-nextTick/</url>
    <content><![CDATA[<h1 id="vue源码解读系列-nextTick"><a href="#vue源码解读系列-nextTick" class="headerlink" title="vue源码解读系列-nextTick"></a>vue源码解读系列-nextTick</h1><h2 id="nextTick的用法"><a href="#nextTick的用法" class="headerlink" title="nextTick的用法"></a>nextTick的用法</h2><p>  依据vue官网中的教程而言，nextTick这个函数作用为：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。也就是说在当次事件循环中执行异步操作的回调函数中插入nextTick中的回调，并获取更新后的DOM。一般用来执行数据更新视图的操作。</p>
<a id="more"></a>  
<p>  一般用法：<br>  <figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">html部分：</span><br><span class="line">&lt;div id=<span class="string">"example"</span>&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br><span class="line">js部分：</span><br><span class="line">var <span class="keyword">vm</span> = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="keyword">e</span><span class="variable">l:</span> <span class="string">'#example'</span>,</span><br><span class="line">    dat<span class="variable">a:</span> &#123;</span><br><span class="line">    message: <span class="string">'123'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">vm</span>.message = <span class="string">'new message'</span> // 更改数据</span><br><span class="line"><span class="keyword">vm</span>.$<span class="keyword">el</span>.textContent === <span class="string">'new message'</span> // false</span><br><span class="line">Vue.nextTick(<span class="function"><span class="keyword">function</span> <span class="params">()</span> &#123;</span></span><br><span class="line"><span class="keyword">vm</span>.$<span class="keyword">el</span>.textContent === <span class="string">'new message'</span> // true</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h2 id="nextTick源码解读"><a href="#nextTick源码解读" class="headerlink" title="nextTick源码解读"></a>nextTick源码解读</h2><p>  以下根据nextTick的源码中的方法逐个分析。</p>
<p>  函数<code>nextTickHandler</code>是nextTick中执行回调函数的操作，把回调<br>  队列中的回调函数依次执行。<br>  <figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">nextTickHandler</span> <span class="params">()</span> &#123; //依次把回调队列中的回调函数执行</span></span><br><span class="line">  pending = <span class="built_in">false</span>;</span><br><span class="line">  var copies = callbacks.slice(<span class="number">0</span>);</span><br><span class="line">  callbacks.<span class="built_in">length</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (var <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; copies.<span class="built_in">length</span>; <span class="built_in">i</span>++) &#123;</span><br><span class="line">    copies[<span class="built_in">i</span>]();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>  下面是vue中的nextTick的方法全部源码，已经在关键代码处写了注释说明</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nextTick = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> callbacks = [];   <span class="comment">//声明一个回调函数队列</span></span><br><span class="line">  <span class="keyword">var</span> pending = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> timerFunc;    <span class="comment">//声明一个函数名</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">nextTickHandler</span> (<span class="params"></span>) </span>&#123; <span class="comment">//依次把回调队列中的回调函数执行</span></span><br><span class="line">    pending = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> copies = callbacks.slice(<span class="number">0</span>);</span><br><span class="line">    callbacks.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; copies.length; i++) &#123;</span><br><span class="line">      copies[i]();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// An asynchronous deferring mechanism.</span></span><br><span class="line">  <span class="comment">// 异步延迟机制</span></span><br><span class="line">  <span class="comment">// In pre 2.4, we used to use microtasks (Promise/MutationObserver)</span></span><br><span class="line">  <span class="comment">// 在vue的 2.4版本前，我们常常使用微任务(Promise/MutationObserver)</span></span><br><span class="line">  <span class="comment">// but microtasks actually has too high a priority and fires in between</span></span><br><span class="line">  <span class="comment">// 但是实际上微任务有着很高的优先级而且在顺序事件甚至在冒泡事件中触发。</span></span><br><span class="line">  <span class="comment">// supposedly sequential events (e.g. #4521, #6690) or even between</span></span><br><span class="line">  <span class="comment">// bubbling of the same event (#6566). Technically setImmediate should be</span></span><br><span class="line">  <span class="comment">// 从技术上来说， setImmediate应该是一个理想的选择。</span></span><br><span class="line">  <span class="comment">// the ideal choice, but it's not available everywhere; and the only polyfill</span></span><br><span class="line">  <span class="comment">// 但是它也不适用于所有的地方；</span></span><br><span class="line">  <span class="comment">// that consistently queues the callback after all DOM events triggered in the</span></span><br><span class="line">  <span class="comment">// same loop is by using MessageChannel.</span></span><br><span class="line">  <span class="comment">// 在同一个事件循环中，在一段完整的回调函数队列被MessageChannel方法所触发的全部DOM事件之后，</span></span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Vue 在内部尝试对异步队列使用原生的 Promise.then 和 MessageChannel，如果执行环境不支持，会采用 setTimeout(fn, 0) 代替。以下是 setImmediate、MessageChannel、Promise、setTimeout四种情况进行分析*/</span></span><br><span class="line">  <span class="comment">// 判断setImmediate方法是否存在且为本地函数，如果符合判断则执行setImmediate方法，其余三种判断同理</span></span><br><span class="line">  <span class="comment">// setImmediate用法：把一些执行时间长的操作放到该回调函数中，当浏览器执行完后序操作后就立刻执行该函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> setImmediate !== <span class="string">'undefined'</span> &amp;&amp; isNative(setImmediate)) &#123;</span><br><span class="line">    timerFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      setImmediate(nextTickHandler);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> MessageChannel !== <span class="string">'undefined'</span> &amp;&amp; (</span><br><span class="line">    isNative(MessageChannel) ||</span><br><span class="line">    <span class="comment">// PhantomJS</span></span><br><span class="line">    MessageChannel.toString() === <span class="string">'[object MessageChannelConstructor]'</span></span><br><span class="line">  )) &#123;</span><br><span class="line">    <span class="comment">// 如果满足消息通道的情形</span></span><br><span class="line">    <span class="keyword">var</span> channel = <span class="keyword">new</span> MessageChannel(); <span class="comment">//声明一个消息通道对象</span></span><br><span class="line">    <span class="keyword">var</span> port = channel.port2;</span><br><span class="line">    channel.port1.onmessage = nextTickHandler; <span class="comment">//监听回调函数</span></span><br><span class="line">    timerFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      port.postMessage(<span class="number">1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span></span><br><span class="line">  <span class="comment">/* istanbul ignore next */</span></span><br><span class="line">  <span class="comment">// 满足promise的情况</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">'undefined'</span> &amp;&amp; isNative(<span class="built_in">Promise</span>)) &#123;</span><br><span class="line">    <span class="comment">// use microtask in non-DOM environments, e.g. Weex</span></span><br><span class="line">    <span class="keyword">var</span> p = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">    timerFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      p.then(nextTickHandler);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      &lt;!-- 最后如果<span class="built_in">Promise</span>.then 和 MessageChannel，如果执行环境不支持，则调用setTimeout --&gt;</span><br><span class="line">    <span class="comment">// fallback to setTimeout</span></span><br><span class="line">    timerFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      setTimeout(nextTickHandler, <span class="number">0</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 返回一个方法，该方法接受外部传进来回调函数和上下文 --&gt;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">queueNextTick</span> (<span class="params">cb, ctx</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _resolve;</span><br><span class="line">    callbacks.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          cb.call(ctx);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          handleError(e, ctx, <span class="string">'nextTick'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_resolve) &#123;</span><br><span class="line">        _resolve(ctx);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 闭包，pending的作用为：限制同样的回调函数多次重复调用，如果同一个 watcher 被多次触发，只会被推入到队列中一次。</span></span><br><span class="line">    <span class="keyword">if</span> (!pending) &#123;</span><br><span class="line">      pending = <span class="literal">true</span>;</span><br><span class="line">      timerFunc();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// $flow-disable-</span></span><br><span class="line">    &lt;!-- <span class="number">2.1</span><span class="number">.0</span> 起新增：如果没有提供回调且在支持 <span class="built_in">Promise</span> 的环境中，则返回一个 <span class="built_in">Promise</span>。 --&gt;</span><br><span class="line">    <span class="keyword">if</span> (!cb &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        _resolve = resolve;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>JSseries-async</title>
    <url>/2020/06/16/JSseries-async/</url>
    <content><![CDATA[<h1 id="JS基本概念系列–Js的异步机制"><a href="#JS基本概念系列–Js的异步机制" class="headerlink" title="JS基本概念系列–Js的异步机制"></a>JS基本概念系列–Js的异步机制</h1><h2 id="js在浏览器中的运行机制"><a href="#js在浏览器中的运行机制" class="headerlink" title="js在浏览器中的运行机制"></a>js在浏览器中的运行机制</h2><p>  js一般运行在浏览器中，而浏览器有多个常驻线程：<br>  1.渲染引擎线程<br>  2.js引擎线程<br>  3.异步http请求线程</p>
<a id="more"></a>  
<p>  4.事件触发线程<br>  5.定时器触发线程<br>  由于js是运行在js引擎线程之上，而且在js引擎线程运行的时候，渲染引擎线程是被挂起的。因为js引擎线程是可以直接操作DOM的，而如果在渲染引擎线程工作的时候js引擎操作DOM，就会造成DOM混乱，所以这两者某个时间只能运行一个，另一个就要被挂起。</p>
<h2 id="同步任务、异步任务"><a href="#同步任务、异步任务" class="headerlink" title="同步任务、异步任务"></a>同步任务、异步任务</h2><p>  同步任务：如果这个函数返回的值，能够立刻被得到或者预测到。<br>  <strong>如果是同步函数，即使函数运行比较耗时，还是会等待到执行完毕</strong></p>
<p>  异步任务：函数返回时，调用者不能立刻得到结果，必须通过一些手段得到。</p>
<h2 id="事件循环-Event-Loop"><a href="#事件循环-Event-Loop" class="headerlink" title="事件循环(Event Loop)"></a>事件循环(Event Loop)</h2><p>  js在浏览器运行时，主要有几部分。一个是执行同步任务的主线程–执行栈，还有消息队列。其中异步任务又可细分为宏任务和微任务。这两者分别存储在对应的异步任务队列里面。<br>  宏任务：settimeout、setinternal、整段js代码、io操作、dom操作<br>  微任务：promise、process.nextTick</p>
<p>  具体执行过程大致为：首先当执行一段代码时，就相当于开始执行一个异步任务(该任务为一整段js代码)，在执行的过程中，如果遇到同步代码段，会直接放到执行栈中执行。而如果遇到异步任务，则会新开对应的线程执行该异步任务(见上文的浏览器线程)可直接执行的部分。同时把执行状态和回调函数放到对应的消息队列中，当这段代码执行完后，主线程会去查看异步任务队列，如果微任务队列有任务，则把微任务队列清空(<strong>这也是为什么微任务能插队宏任务的原因</strong>)。清空之后，继续执行下一个异步宏任务。可以说，宏任务和微任务执行关系是：每执行一个宏任务就要清空微任务队列。</p>
<p>  <img src="https://user-gold-cdn.xitu.io/2018/1/26/161314dcb17a84ad?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt title="执行示例"></p>
<p><a href="https://juejin.im/post/5a6ad46ef265da3e513352c8" target="_blank" rel="noopener">参考引用:</a></p>
]]></content>
  </entry>
  <entry>
    <title>JSseries-Econtext</title>
    <url>/2020/06/10/JSseries-Econtext/</url>
    <content><![CDATA[<h1 id="JS基本概念系列–作用域"><a href="#JS基本概念系列–作用域" class="headerlink" title="JS基本概念系列–作用域"></a>JS基本概念系列–作用域</h1><h2 id="作用域的原理和介绍"><a href="#作用域的原理和介绍" class="headerlink" title="作用域的原理和介绍"></a>作用域的原理和介绍</h2><p>执行环境(Execution Context)是JavaScript中最为重要的概念，一般当进入一段代码或者一个函数中时，就标志着进入了某个执行环境。而且每个执行环境都包含有一个变量对象(variable object),该执行环境中的所有对象和函数都被囊括在里面。</p>
<a id="more"></a>
<p>每个函数也有着自己的执行环境，随着函数的调用，该函数的执行环境会被推入一个环境栈之中，当该函数被调用完毕，环境栈就会把它推出来，这个时候这个执行环境就会被销毁。函数的执行环境中把活动对象(activity object)当做变量对象。</p>
<p>在一个被执行的执行环境中，变量对象存在一条作用域链(scope chain),当前的变量对象始终是该条作用域链的起点。同时作用域链只允许从当前执行环境向父执行环境搜索，直至到全局变量，不允许反向。这也是闭包能实现的原理之一。</p>
<p>浏览器中，会把全局的执行环境视为Windows对象。当某个环境被销毁时，其内的变量对象也会被销毁。全局执行环境中的变量对象始终是作用域链的终点。</p>
<h2 id="let块级作用域"><a href="#let块级作用域" class="headerlink" title="let块级作用域"></a>let块级作用域</h2><p>js中不存在块级作用域，由上可知只存在函数作用域或者全局作用域。而es6引入的let赋予了这一效果。而var声明会被自动添加到最近的作用域之中。</p>
<h2 id="延长作用域链"><a href="#延长作用域链" class="headerlink" title="延长作用域链"></a>延长作用域链</h2><p>js中有两种方式可以延长作用域长度：with和try catch中的catch块。其中with()中的参数是某个变量对象，它会被添加到作用域链的前端。catch块会创建一个新的变量对象，把抛出的错误对象声明包含进去。</p>
]]></content>
  </entry>
  <entry>
    <title>JSseries_prototype</title>
    <url>/2020/06/08/JSseries-prototype/</url>
    <content><![CDATA[<h1 id="JS基本概念系列–原型链和继承方式"><a href="#JS基本概念系列–原型链和继承方式" class="headerlink" title="JS基本概念系列–原型链和继承方式"></a>JS基本概念系列–原型链和继承方式</h1><h2 id="原型的概念"><a href="#原型的概念" class="headerlink" title="原型的概念"></a>原型的概念</h2><h4 id="在js之中，每个构造函数都拥有一个名为prototype属性，它指向此构造函数创立之初就被js赋予的该构造函数的原型-prototype-。而在该原型对象中存在一个名为constructor属性，指向它的构造函数。"><a href="#在js之中，每个构造函数都拥有一个名为prototype属性，它指向此构造函数创立之初就被js赋予的该构造函数的原型-prototype-。而在该原型对象中存在一个名为constructor属性，指向它的构造函数。" class="headerlink" title="在js之中，每个构造函数都拥有一个名为prototype属性，它指向此构造函数创立之初就被js赋予的该构造函数的原型(prototype)。而在该原型对象中存在一个名为constructor属性，指向它的构造函数。"></a>在js之中，每个构造函数都拥有一个名为prototype属性，它指向此构造函数创立之初就被js赋予的该构造函数的原型(prototype)。而在该原型对象中存在一个名为constructor属性，指向它的构造函数。</h4><a id="more"></a>

<h4 id="该构造函数的实例被创立时就会包含一个指针-内部属性-，指向这个构造函数的原型，在主流浏览器打印中一般用-Prototype-表示，但是不能直接访问。"><a href="#该构造函数的实例被创立时就会包含一个指针-内部属性-，指向这个构造函数的原型，在主流浏览器打印中一般用-Prototype-表示，但是不能直接访问。" class="headerlink" title="该构造函数的实例被创立时就会包含一个指针(内部属性)，指向这个构造函数的原型，在主流浏览器打印中一般用[[Prototype]],表示，但是不能直接访问。"></a>该构造函数的实例被创立时就会包含一个指针(内部属性)，指向<strong>这个构造函数的原型</strong>，在主流浏览器打印中一般用[[Prototype]],表示，但是不能直接访问。</h4><h2 id="原型链概念"><a href="#原型链概念" class="headerlink" title="原型链概念"></a>原型链概念</h2><h4 id="假设有这种情况：一个构造函数的实例调用一个函数，但是该实例没有，这时js就会从-Prototype-指向的对象去找，这就找到了该构造函数的原型。如果这个原型对象也包含指向另一个原型对象的指针，那么将会继续向上找寻，层层递进。这就是原型链。"><a href="#假设有这种情况：一个构造函数的实例调用一个函数，但是该实例没有，这时js就会从-Prototype-指向的对象去找，这就找到了该构造函数的原型。如果这个原型对象也包含指向另一个原型对象的指针，那么将会继续向上找寻，层层递进。这就是原型链。" class="headerlink" title="假设有这种情况：一个构造函数的实例调用一个函数，但是该实例没有，这时js就会从[[Prototype]]指向的对象去找，这就找到了该构造函数的原型。如果这个原型对象也包含指向另一个原型对象的指针，那么将会继续向上找寻，层层递进。这就是原型链。"></a>假设有这种情况：一个构造函数的实例调用一个函数，但是该实例没有，这时js就会从[[Prototype]]指向的对象去找，这就找到了该构造函数的原型。如果这个原型对象也包含指向另一个原型对象的指针，那么将会继续向上找寻，层层递进。这就是原型链。</h4><h2 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h2><h3 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1. 原型链继承"></a>1. 原型链继承</h3><h4 id="通过原型链的原理继承超类型的原型上的方法。"><a href="#通过原型链的原理继承超类型的原型上的方法。" class="headerlink" title="通过原型链的原理继承超类型的原型上的方法。"></a>通过原型链的原理继承超类型的原型上的方法。</h4><pre><code>function SuperType() {
    this.property = true;
}
SuperType.prototype.getSuperValue = function() {
    return this.property;
}
function SubType() {
    this.subproterty = false;
}

//关键代码
SubType.prototype = new SuperType();   </code></pre><h3 id="2-借用构造函数"><a href="#2-借用构造函数" class="headerlink" title="2. 借用构造函数"></a>2. 借用构造函数</h3><h4 id="继承的是构造函数自身的属性"><a href="#继承的是构造函数自身的属性" class="headerlink" title="继承的是构造函数自身的属性"></a>继承的是构造函数自身的属性</h4><pre><code>function SuperType() {
    this.property = true;
}
SuperType.prototype.getSuperValue = function() {
    return this.property;
}
function SubType() {
    &lt;!-- 继承SuperType属性方法 --&gt;
    SuperType.call(this);
}   </code></pre><h3 id="3-组合继承"><a href="#3-组合继承" class="headerlink" title="3. 组合继承"></a>3. 组合继承</h3><h4 id="通过结合原型链和构造函数的形式组合继承超类自身属性和构造函数的原型上的方法。"><a href="#通过结合原型链和构造函数的形式组合继承超类自身属性和构造函数的原型上的方法。" class="headerlink" title="通过结合原型链和构造函数的形式组合继承超类自身属性和构造函数的原型上的方法。"></a>通过结合原型链和构造函数的形式组合继承超类自身属性和构造函数的原型上的方法。</h4><pre><code>function SuperType() {
    this.property = true;
}
SuperType.prototype.getSuperValue = function() {
    return this.property;
}
function SubType() {
    &lt;!-- 继承SuperType属性 --&gt;
    SuperType.call(this);
}        
//继承SuperType的原型属性方法
SubType.prototype = new SuperType();</code></pre><h3 id="4-寄生继承"><a href="#4-寄生继承" class="headerlink" title="4. 寄生继承"></a>4. 寄生继承</h3><h4 id="主要针对的是对象的继承，而不是自定义对象和构造函数"><a href="#主要针对的是对象的继承，而不是自定义对象和构造函数" class="headerlink" title="主要针对的是对象的继承，而不是自定义对象和构造函数"></a>主要针对的是对象的继承，而不是自定义对象和构造函数</h4><h4 id="object-create的实现主要为：创建一个新的构造函数，把传入的参数对象赋值给该构造函数的原型，最后返回该构造函数的一个实例。下面以一个object函数实现"><a href="#object-create的实现主要为：创建一个新的构造函数，把传入的参数对象赋值给该构造函数的原型，最后返回该构造函数的一个实例。下面以一个object函数实现" class="headerlink" title="object.create的实现主要为：创建一个新的构造函数，把传入的参数对象赋值给该构造函数的原型，最后返回该构造函数的一个实例。下面以一个object函数实现"></a>object.create的实现主要为：创建一个新的构造函数，把传入的参数对象赋值给该构造函数的原型，最后返回该构造函数的一个实例。下面以一个object函数实现</h4><pre><code>object(val) {
    function F() {};
    F.prototype = val;
    return new F();
}</code></pre><h4 id="寄生继承："><a href="#寄生继承：" class="headerlink" title="寄生继承："></a>寄生继承：</h4><pre><code>function SuperType() {
    this.property = true;
}
SuperType.prototype.getSuperValue = function() {
    return this.property;
}
function SubType() {
    this.subproterty = false;
}

//关键代码,实现寄生继承
SubType.prototype = object(SuperType.prototype);   </code></pre><h3 id="5-寄生组合继承"><a href="#5-寄生组合继承" class="headerlink" title="5. 寄生组合继承"></a>5. 寄生组合继承</h3><h4 id="本质上是组合继承，只是把组合继承中的原型链方式由借用实例生成的方式变为寄生方式"><a href="#本质上是组合继承，只是把组合继承中的原型链方式由借用实例生成的方式变为寄生方式" class="headerlink" title="本质上是组合继承，只是把组合继承中的原型链方式由借用实例生成的方式变为寄生方式"></a>本质上是组合继承，只是把组合继承中的原型链方式由借用实例生成的方式变为寄生方式</h4><pre><code>function SuperType() {
    this.property = true;
}
SuperType.prototype.getSuperValue = function() {
    return this.property;
}
function SubType() {
    &lt;!-- 继承SuperType属性 --&gt;
    SuperType.call(this);
    this.subproterty = false;
}

//关键代码,实现寄生继承
SubType.prototype = object(SuperType.prototype); </code></pre>]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/09/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a><a id="more"></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
